/*
 * This file is generated by jOOQ.
 */
package com.pitachips.trxbatch.generated.tables;


import com.pitachips.trxbatch.generated.Keys;
import com.pitachips.trxbatch.generated.Trxbatch;
import com.pitachips.trxbatch.generated.tables.records.MonthlyTrxReportResultRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MonthlyTrxReportResult extends TableImpl<MonthlyTrxReportResultRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trxbatch.MONTHLY_TRX_REPORT_RESULT</code>
     */
    public static final MonthlyTrxReportResult MONTHLY_TRX_REPORT_RESULT = new MonthlyTrxReportResult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MonthlyTrxReportResultRecord> getRecordType() {
        return MonthlyTrxReportResultRecord.class;
    }

    /**
     * The column <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.id</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.customer_id</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.target_year_month</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, String> TARGET_YEAR_MONTH = createField(DSL.name("target_year_month"), SQLDataType.CHAR(7).nullable(false), this, "");

    /**
     * The column <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.channel</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, String> CHANNEL = createField(DSL.name("channel"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.status</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.fail_reason</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, String> FAIL_REASON = createField(DSL.name("fail_reason"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.fail_detail</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, String> FAIL_DETAIL = createField(DSL.name("fail_detail"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.created_at</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>trxbatch.MONTHLY_TRX_REPORT_RESULT.updated_at</code>.
     */
    public final TableField<MonthlyTrxReportResultRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private MonthlyTrxReportResult(Name alias, Table<MonthlyTrxReportResultRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MonthlyTrxReportResult(Name alias, Table<MonthlyTrxReportResultRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>trxbatch.MONTHLY_TRX_REPORT_RESULT</code> table
     * reference
     */
    public MonthlyTrxReportResult(String alias) {
        this(DSL.name(alias), MONTHLY_TRX_REPORT_RESULT);
    }

    /**
     * Create an aliased <code>trxbatch.MONTHLY_TRX_REPORT_RESULT</code> table
     * reference
     */
    public MonthlyTrxReportResult(Name alias) {
        this(alias, MONTHLY_TRX_REPORT_RESULT);
    }

    /**
     * Create a <code>trxbatch.MONTHLY_TRX_REPORT_RESULT</code> table reference
     */
    public MonthlyTrxReportResult() {
        this(DSL.name("MONTHLY_TRX_REPORT_RESULT"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Trxbatch.TRXBATCH;
    }

    @Override
    public Identity<MonthlyTrxReportResultRecord, Long> getIdentity() {
        return (Identity<MonthlyTrxReportResultRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MonthlyTrxReportResultRecord> getPrimaryKey() {
        return Keys.KEY_MONTHLY_TRX_REPORT_RESULT_PRIMARY;
    }

    @Override
    public MonthlyTrxReportResult as(String alias) {
        return new MonthlyTrxReportResult(DSL.name(alias), this);
    }

    @Override
    public MonthlyTrxReportResult as(Name alias) {
        return new MonthlyTrxReportResult(alias, this);
    }

    @Override
    public MonthlyTrxReportResult as(Table<?> alias) {
        return new MonthlyTrxReportResult(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyTrxReportResult rename(String name) {
        return new MonthlyTrxReportResult(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyTrxReportResult rename(Name name) {
        return new MonthlyTrxReportResult(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyTrxReportResult rename(Table<?> name) {
        return new MonthlyTrxReportResult(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyTrxReportResult where(Condition condition) {
        return new MonthlyTrxReportResult(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyTrxReportResult where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyTrxReportResult where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyTrxReportResult where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyTrxReportResult where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyTrxReportResult where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyTrxReportResult where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyTrxReportResult where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyTrxReportResult whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyTrxReportResult whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
